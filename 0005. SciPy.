import numpy as np
import matplotlib.pyplot as plt
import scipy
from scipy import constants
from scipy import io
from scipy.optimize import root
from scipy.optimize import minimize
from scipy.sparse import csr_matrix
from scipy.sparse.csgraph import connected_components
from scipy.sparse.csgraph import dijkstra
from scipy.sparse.csgraph import floyd_warshall
from scipy.sparse.csgraph import bellman_ford
from scipy.sparse.csgraph import depth_first_order
from scipy.spatial import Delaunay
from scipy.spatial import ConvexHull
from scipy.spatial import KDTree
from scipy.spatial.distance import euclidean
from scipy.spatial.distance import cityblock
from scipy.spatial.distance import cosine
from scipy.spatial.distance import hamming
from scipy.interpolate import interp1d
from scipy.interpolate import UnivariateSpline
from scipy.interpolate import Rbf
from scipy.stats import ttest_ind
from scipy.stats import kstest
from scipy.stats import describe
from scipy.stats import skew, kurtosis
from scipy.stats import normaltest
from math import cos


print(scipy.__version__)
print(constants.liter)
print(constants.pi)
for list_constants in dir(constants):
    print(list_constants)

# Metric (SI) prefixes:
print(constants.yotta)
print(constants.zetta)
print(constants.exa)
print(constants.peta)
print(constants.tera)
print(constants.giga)
print(constants.mega)
print(constants.kilo)
print(constants.hecto)
print(constants.deka)
print(constants.centi)
print(constants.milli)
print(constants.micro)
print(constants.nano)
print(constants.pico)
print(constants.femto)
print(constants.atto)
print(constants.zepto)

# Binary prefixes:
print(constants.kibi)
print(constants.mebi)
print(constants.gibi)
print(constants.tebi)
print(constants.pebi)
print(constants.exbi)
print(constants.zebi)
print(constants.yobi)

# Mass:
print(constants.gram)
print(constants.metric_ton)
print(constants.grain)
print(constants.lb)
print(constants.pound)
print(constants.oz)
print(constants.ounce)
print(constants.stone)
print(constants.long_ton)
print(constants.short_ton)
print(constants.troy_ounce)
print(constants.troy_pound)
print(constants.carat)
print(constants.atomic_mass)
print(constants.m_u)
print(constants.u)

# Angle:
print(constants.degree)
print(constants.arcmin)
print(constants.arcminute)
print(constants.arcsec)
print(constants.arcsecond)

# Time:
print(constants.minute)
print(constants.hour)
print(constants.day)
print(constants.week)
print(constants.year)
print(constants.Julian_year)

# Length:
print(constants.inch)
print(constants.foot)
print(constants.yard)
print(constants.mile)
print(constants.mil)
print(constants.pt)
print(constants.point)
print(constants.survey_foot)
print(constants.survey_mile)
print(constants.nautical_mile)
print(constants.fermi)
print(constants.angstrom)
print(constants.micron)
print(constants.au)
print(constants.astronomical_unit)
print(constants.light_year)
print(constants.parsec)

# Pressure:
print(constants.atm)
print(constants.atmosphere)
print(constants.bar)
print(constants.torr)
print(constants.mmHg)
print(constants.psi)

# Area:
print(constants.hectare)
print(constants.acre)

# Volume:
print(constants.liter)
print(constants.litre)
print(constants.gallon)
print(constants.gallon_US)
print(constants.gallon_imp)
print(constants.fluid_ounce)
print(constants.fluid_ounce_US)
print(constants.fluid_ounce_imp)
print(constants.barrel)
print(constants.bbl)

# Speed:
print(constants.kmh)
print(constants.mph)
print(constants.mach)
print(constants.speed_of_sound)
print(constants.knot)

# Temperature:
print(constants.zero_Celsius)
print(constants.degree_Fahrenheit)

# Energy:
print(constants.eV)
print(constants.electron_volt)
print(constants.calorie)
print(constants.calorie_th)
print(constants.calorie_IT)
print(constants.erg)
print(constants.Btu)
print(constants.Btu_IT)
print(constants.Btu_th)
print(constants.ton_TNT)

# Power:
print(constants.hp)
print(constants.horsepower)

# Force:
print(constants.dyn)
print(constants.dyne)
print(constants.lbf)
print(constants.pound_force)
print(constants.kgf)
print(constants.kilogram_force)


# Optimizers:
def eqn(x):
    return x + cos(x)


my_root = root(eqn, 0)
print(my_root.x)
print(my_root)


def eqn(x):
    return x**2 + x + 2


my_min = minimize(eqn, 0, method="BFGS")
print(my_min)

arr = np.array([0, 0, 0, 0, 0, 1, 1, 0, 2])
print(csr_matrix(arr))

arr = np.array([[0, 0, 0], [0, 0, 1], [1, 0, 2]])
print(csr_matrix(arr))
print(csr_matrix(arr).data)
print(csr_matrix(arr).count_nonzero())

arr = np.array([[0, 0, 0], [0, 0, 1], [1, 0, 2]])
mat = csr_matrix(arr)
mat.eliminate_zeros()
print(mat)

arr = np.array([[0, 0, 0], [0, 0, 1], [1, 0, 2]])
mat = csr_matrix(arr)
mat.sum_duplicates()
print(mat)

arr = np.array([[0, 0, 0], [0, 0, 1], [1, 0, 2]])
new_arr = csr_matrix(arr).tocsc()
print(new_arr)

arr = np.array([
    [0, 1, 2],
    [1, 0, 0],
    [2, 0, 0]
])
new_arr = csr_matrix(arr)
print(connected_components(new_arr))
print(dijkstra(new_arr, return_predecessors=True, indices=0))
print(floyd_warshall(new_arr, return_predecessors=True))

arr = np.array([
    [0, 1, 2],
    [1, 0, 0],
    [2, 0, 0]
])
new_arr = csr_matrix(arr)
print(bellman_ford(new_arr, return_predecessors=True, indices=0))

arr = np.array([
    [0, 1, 0, 1],
    [1, 1, 1, 1],
    [2, 1, 1, 0],
    [0, 1, 0, 1]
])
new_arr = csr_matrix(arr)
print(depth_first_order(new_arr, 1))

points = np.array([
    [2, 4],
    [3, 4],
    [3, 0],
    [2, 2],
    [4, 1]
])
simplices = Delaunay(points).simplices

plt.triplot(points[:, 0], points[:, 1], simplices)
plt.scatter(points[:, 0], points[:, 1], color="r")

points = np.array([
    [2, 4],
    [3, 4],
    [3, 0],
    [2, 2],
    [4, 1],
    [1, 2],
    [5, 0],
    [3, 1],
    [1, 2],
    [0, 2]
])
hull = ConvexHull(points)
hull_points = hull.simplices
plt.scatter(points[:, 0], points[:, 1])
for simplex in hull_points:
    plt.plot(points[simplex, 0], points[simplex, 1], "k-")

# plt.show()

points = [(1, -1), (2, 3), (-2, 3), (2, -3)]
kdtree = KDTree(points)
res = kdtree.query((1, 1))
print(res)

p1 = (1, 0)
p2 = (10, 2)
res = euclidean(p1, p2)
print(res)

p1 = (1, 0)
p2 = (10, 2)
res = cityblock(p1, p2)
print(res)

p1 = (1, 0)
p2 = (10, 2)
res = cosine(p1, p2)
print(res)

p1 = (True, False, True)
p2 = (False, True, True)
res = hamming(p1, p2)
print(res)

p1 = (1, 0, 1)
p2 = (0, 1, 1)
res = hamming(p1, p2)
print(res)

arr = np.arange(10)
io.savemat("arr.mat", {"vec": arr})

my_data = io.loadmat("arr.mat")
print(my_data)
print(my_data["vec"])

my_data = io.loadmat("arr.mat", squeeze_me=True)
print(my_data)
print(my_data["vec"])

xs = np.arange(10)
ys = 2*xs + 1
interp_func = interp1d(xs, ys)
new_arr = interp_func(np.arange(2.1, 3.1, 0.1))
print(new_arr)

xs = np.arange(10)
ys = xs**2 + np.sin(xs) + 1
interp_func = UnivariateSpline(xs, ys)
new_arr = interp_func(np.arange(2.1, 3.1, 0.1))
print(new_arr)

xs = np.arange(10)
ys = xs**2 + np.sin(xs) + 1
interp_func = Rbf(xs, ys)
new_arr = interp_func(np.arange(2.1, 3.1, 0.1))
print(new_arr)

v1 = np.random.normal(size=100)
v2 = np.random.normal(size=100)
res = ttest_ind(v1, v2)
print(res)
res = ttest_ind(v1, v2).pvalue
print(res)

v = np.random.normal(size=100)
res = kstest(v, "norm")
print(res)

v = np.random.normal(size=100)
res = describe(v)
print(res)

v = np.random.normal(size=100)
print(skew(v))
print(kurtosis(v))

v = np.random.normal(size=100)
print(normaltest(v))
